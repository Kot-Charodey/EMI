using System.Threading.Tasks;

namespace EMI.Network
{
    using EMI.ProBuffer;
    /* Рекомендации по реализации интерфейса
     * address для сетевых подключений в виде текста localhost:port
     * address для других типов интерфейсов может быть описан свой
     * при неверном address выдовать исключение с пояснительной ошибкой
     * следует использовать многопоточность/асинхронность
     * не асинхронные методы не могут блокировать поток
     * данный интерфейс является узким местом и поэтому должн максимально оптимизированн (ИЗБЕГАТЬ создания объектов)
     * может отвечать за приём всех данных и раздачу их по всем подключенным INetworkClient, так как интерфейс один а подключение множественное (следует запустить доп. поток обработки входных данных)
     */
    /// <summary>
    /// Интерфейс для обработки и подключения клиентов к серверу
    /// </summary>
    public interface INetworkServer
    {
        /// <summary>
        /// Конвеер для выдачи массивов (использовать при распакове/обработки входных данных) необходим для рекомендации "ИЗБЕГАТЬ создания объектов"
        /// Устанавливается библиотекой при инициализации
        /// </summary>
        ProArrayBuffer ProArrayBuffer { set; }
        /// <summary>
        /// Запустить сервер
        /// </summary>
        /// <param name="address">имя/аддрес интерфеса (и порта) для прослушки</param>
        void StartServer(string address);
        /// <summary>
        /// Остановить сервер (все клиенты будут отключены)
        /// </summary>
        void StopServer();
        /// <summary>
        /// Возвращает клиента который успешно попытался подключиться к серверу
        /// </summary>
        /// <returns></returns>
        Task<INetworkClient> AcceptClient();
    }
}
