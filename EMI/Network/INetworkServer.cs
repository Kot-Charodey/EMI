using System.Threading.Tasks;
using System.Threading;

namespace EMI.Network
{

    /* Рекомендации по реализации интерфейса
* address для сетевых подключений в виде текста localhost#port
* address для других типов интерфейсов может быть описан свой
* при неверном address выдовать исключение с пояснительной ошибкой
* следует использовать многопоточность/асинхронность
* не асинхронные методы не могут блокировать поток
* данный интерфейс является узким местом и поэтому должн максимально оптимизированн (ИЗБЕГАТЬ создания объектов)
* может отвечать за приём всех данных и раздачу их по всем подключенным INetworkClient, так как интерфейс один а подключение множественное (следует запустить доп. поток обработки входных данных)
*/
    /// <summary>
    /// Интерфейс для обработки и подключения клиентов к серверу
    /// </summary>
    public interface INetworkServer
    {
        /// <summary>
        /// Запустить сервер
        /// </summary>
        /// <param name="address">имя/аддрес интерфеса (и порта) для прослушки</param>
        void StartServer(string address);
        /// <summary>
        /// Остановить сервер (все клиенты будут отключены)
        /// </summary>
        void StopServer();
        /// <summary>
        /// Ожидает и возвращает клиента попытавшегося подключиться
        /// </summary>
        /// <returns>сетевой клиент</returns>
        Task<INetworkClient> AcceptClient(CancellationToken token);
    }
}
